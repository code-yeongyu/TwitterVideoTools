"""
This type stub file was generated by pyright.
"""

import platform
import shutil
import sys
import xml.etree.ElementTree

if sys.version_info[0] == 2:
    ...
else:
    compat_cookiejar_Cookie = compat_cookiejar.Cookie
if sys.version_info[0] == 2:
    ...
else:
    compat_cookies_SimpleCookie = compat_cookies.SimpleCookie
etree = xml.etree.ElementTree
class _TreeBuilder(etree.TreeBuilder):
    def doctype(self, name, pubid, system): # -> None:
        ...
    


if sys.version_info[0] >= 3:
    def compat_etree_fromstring(text): # -> Element:
        ...
    
else:
    ...
if hasattr(etree, 'register_namespace'):
    compat_etree_register_namespace = ...
else:
    def compat_etree_register_namespace(prefix, uri): # -> None:
        """Register a namespace prefix.
        The registry is global, and any existing mapping for either the
        given prefix or the namespace URI will be removed.
        *prefix* is the namespace prefix, *uri* is a namespace uri. Tags and
        attributes in this namespace will be serialized with prefix if possible.
        ValueError is raised if prefix is reserved or is invalid.
        """
        ...
    
if sys.version_info < (2, 7):
    ...
else:
    compat_xpath = ...
compat_os_name = ...
if compat_os_name == 'nt':
    def compat_shlex_quote(s):
        ...
    
else:
    ...
def compat_ord(c): # -> int:
    ...

if sys.version_info >= (3, 0):
    compat_getenv = ...
    compat_expanduser = ...
    def compat_setenv(key, value, env=...): # -> None:
        ...
    
else:
    ...
if compat_os_name == 'nt' and sys.version_info < (3, 8):
    ...
else:
    compat_realpath = ...
if sys.version_info < (3, 0):
    ...
else:
    def compat_print(s): # -> None:
        ...
    
if sys.version_info < (3, 0) and sys.platform == 'win32':
    ...
else:
    compat_getpass = ...
if sys.version_info < (2, 7):
    ...
else:
    compat_socket_create_connection = ...
def workaround_optparse_bug9161(): # -> None:
    ...

if hasattr(shutil, 'get_terminal_size'):
    compat_get_terminal_size = ...
else:
    _terminal_size = ...
    def compat_get_terminal_size(fallback=...): # -> terminal_size:
        ...
    
if sys.version_info >= (3, 0):
    ...
else:
    ...
if sys.version_info < (3, 3):
    ...
else:
    compat_b64decode = ...
if platform.python_implementation() == 'PyPy' and sys.pypy_version_info < (5, 4, 0):
    def compat_ctypes_WINFUNCTYPE(*args, **kwargs): # -> (tpl: Unknown, *args: Unknown, **kwargs: Unknown) -> Unknown:
        ...
    
else:
    def compat_ctypes_WINFUNCTYPE(*args, **kwargs):
        ...
    
__all__ = ['compat_HTMLParseError', 'compat_HTMLParser', 'compat_HTTPError', 'compat_Struct', 'compat_b64decode', 'compat_basestring', 'compat_chr', 'compat_cookiejar', 'compat_cookiejar_Cookie', 'compat_cookies', 'compat_cookies_SimpleCookie', 'compat_ctypes_WINFUNCTYPE', 'compat_etree_Element', 'compat_etree_fromstring', 'compat_etree_register_namespace', 'compat_expanduser', 'compat_get_terminal_size', 'compat_getenv', 'compat_getpass', 'compat_html_entities', 'compat_html_entities_html5', 'compat_http_client', 'compat_http_server', 'compat_input', 'compat_integer_types', 'compat_itertools_count', 'compat_kwargs', 'compat_numeric_types', 'compat_ord', 'compat_os_name', 'compat_parse_qs', 'compat_print', 'compat_realpath', 'compat_setenv', 'compat_shlex_quote', 'compat_shlex_split', 'compat_socket_create_connection', 'compat_str', 'compat_struct_pack', 'compat_struct_unpack', 'compat_subprocess_get_DEVNULL', 'compat_tokenize_tokenize', 'compat_urllib_error', 'compat_urllib_parse', 'compat_urllib_parse_unquote', 'compat_urllib_parse_unquote_plus', 'compat_urllib_parse_unquote_to_bytes', 'compat_urllib_parse_urlencode', 'compat_urllib_parse_urlparse', 'compat_urllib_request', 'compat_urllib_request_DataHandler', 'compat_urllib_response', 'compat_urlparse', 'compat_urlretrieve', 'compat_xml_parse_error', 'compat_xpath', 'compat_zip', 'workaround_optparse_bug9161']
