"""
This type stub file was generated by pyright.
"""

from .common import PostProcessor
from ..utils import PostProcessingError

EXT_TO_OUT_FORMATS = ...
ACODECS = ...
class FFmpegPostProcessorError(PostProcessingError):
    ...


class FFmpegPostProcessor(PostProcessor):
    def __init__(self, downloader=...) -> None:
        ...
    
    def check_version(self): # -> None:
        ...
    
    @staticmethod
    def get_versions(downloader=...): # -> dict[str, str | Any | Literal[False]] | None:
        ...
    
    @property
    def available(self): # -> bool:
        ...
    
    @property
    def executable(self): # -> str:
        ...
    
    @property
    def probe_available(self): # -> bool:
        ...
    
    @property
    def probe_executable(self): # -> str:
        ...
    
    def get_audio_codec(self, path):
        ...
    
    def run_ffmpeg_multiple_files(self, input_paths, out_path, opts): # -> None:
        ...
    
    def run_ffmpeg(self, path, out_path, opts): # -> None:
        ...
    


class FFmpegExtractAudioPP(FFmpegPostProcessor):
    def __init__(self, downloader=..., preferredcodec=..., preferredquality=..., nopostoverwrites=...) -> None:
        ...
    
    def run_ffmpeg(self, path, out_path, codec, more_opts): # -> None:
        ...
    
    def run(self, information):
        ...
    


class FFmpegVideoConvertorPP(FFmpegPostProcessor):
    def __init__(self, downloader=..., preferedformat=...) -> None:
        ...
    
    def run(self, information): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegEmbedSubtitlePP(FFmpegPostProcessor):
    def run(self, information): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegMetadataPP(FFmpegPostProcessor):
    def run(self, info): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegMergerPP(FFmpegPostProcessor):
    def run(self, info): # -> tuple[Unknown, Unknown]:
        ...
    
    def can_merge(self): # -> bool:
        ...
    


class FFmpegFixupStretchedPP(FFmpegPostProcessor):
    def run(self, info): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegFixupM4aPP(FFmpegPostProcessor):
    def run(self, info): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegFixupM3u8PP(FFmpegPostProcessor):
    def run(self, info): # -> tuple[list[Unknown], Unknown]:
        ...
    


class FFmpegSubtitlesConvertorPP(FFmpegPostProcessor):
    def __init__(self, downloader=..., format=...) -> None:
        ...
    
    def run(self, info): # -> tuple[list[Unknown], Unknown]:
        ...
    


