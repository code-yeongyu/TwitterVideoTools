"""
This type stub file was generated by pyright.
"""

import http.cookies
from enum import Enum
from .minicurses import MultilinePrinter

CHROMIUM_BASED_BROWSERS = ...
SUPPORTED_BROWSERS = ...
class YDLLogger:
    def __init__(self, ydl=...) -> None:
        ...
    
    def debug(self, message): # -> None:
        ...
    
    def info(self, message): # -> None:
        ...
    
    def warning(self, message, only_once=...): # -> None:
        ...
    
    def error(self, message): # -> None:
        ...
    
    class ProgressBar(MultilinePrinter):
        def print(self, message): # -> None:
            ...
        
    
    
    def progress_bar(self): # -> ProgressBar | None:
        """Return a context manager with a print method. (Optional)"""
        ...
    


def load_cookies(cookie_file, browser_specification, ydl): # -> YoutubeDLCookieJar:
    ...

def extract_cookies_from_browser(browser_name, profile=..., logger=..., *, keyring=..., container=...): # -> YoutubeDLCookieJar:
    ...

class ChromeCookieDecryptor:
    """
    Overview:

        Linux:
        - cookies are either v10 or v11
            - v10: AES-CBC encrypted with a fixed key
            - v11: AES-CBC encrypted with an OS protected key (keyring)
            - v11 keys can be stored in various places depending on the activate desktop environment [2]

        Mac:
        - cookies are either v10 or not v10
            - v10: AES-CBC encrypted with an OS protected key (keyring) and more key derivation iterations than linux
            - not v10: 'old data' stored as plaintext

        Windows:
        - cookies are either v10 or not v10
            - v10: AES-GCM encrypted with a key which is encrypted with DPAPI
            - not v10: encrypted with DPAPI

    Sources:
    - [1] https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/os_crypt/
    - [2] https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/os_crypt/key_storage_linux.cc
        - KeyStorageLinux::CreateService
    """
    _cookie_counts = ...
    def decrypt(self, encrypted_value):
        ...
    


def get_cookie_decryptor(browser_root, browser_keyring_name, logger, *, keyring=...): # -> MacChromeCookieDecryptor | WindowsChromeCookieDecryptor | LinuxChromeCookieDecryptor:
    ...

class LinuxChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_keyring_name, logger, *, keyring=...) -> None:
        ...
    
    @staticmethod
    def derive_key(password): # -> bytes:
        ...
    
    def decrypt(self, encrypted_value): # -> str | None:
        ...
    


class MacChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_keyring_name, logger) -> None:
        ...
    
    @staticmethod
    def derive_key(password): # -> bytes:
        ...
    
    def decrypt(self, encrypted_value): # -> str | None:
        ...
    


class WindowsChromeCookieDecryptor(ChromeCookieDecryptor):
    def __init__(self, browser_root, logger) -> None:
        ...
    
    def decrypt(self, encrypted_value): # -> str | None:
        ...
    


class ParserError(Exception):
    ...


class DataParser:
    def __init__(self, data, logger) -> None:
        ...
    
    def read_bytes(self, num_bytes):
        ...
    
    def expect_bytes(self, expected_value, message): # -> None:
        ...
    
    def read_uint(self, big_endian=...): # -> Any:
        ...
    
    def read_double(self, big_endian=...): # -> Any:
        ...
    
    def read_cstring(self): # -> str:
        ...
    
    def skip(self, num_bytes, description=...): # -> None:
        ...
    
    def skip_to(self, offset, description=...): # -> None:
        ...
    
    def skip_to_end(self, description=...): # -> None:
        ...
    


def parse_safari_cookies(data, jar=..., logger=...): # -> YoutubeDLCookieJar:
    """
    References:
        - https://github.com/libyal/dtformats/blob/main/documentation/Safari%20Cookies.asciidoc
            - this data appears to be out of date but the important parts of the database structure is the same
            - there are a few bytes here and there which are skipped during parsing
    """
    ...

class _LinuxDesktopEnvironment(Enum):
    """
    https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/nix/xdg_util.h
    DesktopEnvironment
    """
    OTHER = ...
    CINNAMON = ...
    GNOME = ...
    KDE = ...
    PANTHEON = ...
    UNITY = ...
    XFCE = ...


class _LinuxKeyring(Enum):
    """
    https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/os_crypt/key_storage_util_linux.h
    SelectedLinuxBackend
    """
    KWALLET = ...
    GNOMEKEYRING = ...
    BASICTEXT = ...


SUPPORTED_KEYRINGS = ...
def pbkdf2_sha1(password, salt, iterations, key_length): # -> bytes:
    ...

class LenientSimpleCookie(http.cookies.SimpleCookie):
    """More lenient version of http.cookies.SimpleCookie"""
    _LEGAL_KEY_CHARS = ...
    _LEGAL_VALUE_CHARS = ...
    _RESERVED = ...
    _FLAGS = ...
    _COOKIE_PATTERN = ...
    def load(self, data): # -> None:
        ...
    


