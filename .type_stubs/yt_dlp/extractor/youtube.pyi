"""
This type stub file was generated by pyright.
"""

import enum
from .common import InfoExtractor, SearchInfoExtractor
from ..compat import functools
from ..utils import classproperty

INNERTUBE_CLIENTS = ...
def build_innertube_clients(): # -> None:
    ...

class BadgeType(enum.Enum):
    AVAILABILITY_UNLISTED = ...
    AVAILABILITY_PRIVATE = ...
    AVAILABILITY_PUBLIC = ...
    AVAILABILITY_PREMIUM = ...
    AVAILABILITY_SUBSCRIPTION = ...
    LIVE_NOW = ...


class YoutubeBaseInfoExtractor(InfoExtractor):
    """Provide base functions for Youtube extractors"""
    _RESERVED_NAMES = ...
    _PLAYLIST_ID_RE = ...
    _LOGIN_REQUIRED = ...
    _INVIDIOUS_SITES = ...
    _SUPPORTED_LANG_CODES = ...
    _IGNORED_WARNINGS = ...
    _YT_INITIAL_DATA_RE = ...
    _YT_INITIAL_PLAYER_RESPONSE_RE = ...
    _SAPISID = ...
    def extract_yt_initial_data(self, item_id, webpage, fatal=...): # -> object | Any | dict[Unknown, Unknown] | None:
        ...
    
    @functools.cached_property
    def is_authenticated(self): # -> bool:
        ...
    
    def extract_ytcfg(self, video_id, webpage): # -> Any | dict[Unknown, Unknown]:
        ...
    
    def generate_api_headers(self, *, ytcfg=..., account_syncid=..., session_index=..., visitor_data=..., identity_token=..., api_hostname=..., default_client=...): # -> dict[str, str | Unknown | Any | tuple[str, ...] | object | list[Unknown] | None]:
        ...
    
    @staticmethod
    def extract_relative_time(relative_time_text): # -> datetime | None:
        """
        Extracts a relative time from string and converts to dt object
        e.g. 'streamed 6 days ago', '5 seconds ago (edited)', 'updated today'
        """
        ...
    
    @staticmethod
    def is_music_url(url): # -> bool:
        ...
    


class YoutubeIE(YoutubeBaseInfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _EMBED_REGEX = ...
    _PLAYER_INFO_RE = ...
    _formats = ...
    _SUBTITLE_FORMATS = ...
    _GEO_BYPASS = ...
    IE_NAME = ...
    _TESTS = ...
    _WEBPAGE_TESTS = ...
    @classmethod
    def suitable(cls, url): # -> bool:
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    @classmethod
    def extract_id(cls, url):
        ...
    
    _STORY_PLAYER_PARAMS = ...


class YoutubeTabBaseInfoExtractor(YoutubeBaseInfoExtractor):
    @staticmethod
    def passthrough_smuggled_data(func): # -> (self: Unknown, url: Unknown) -> Unknown:
        ...
    
    @functools.cached_property
    def skip_webpage(self):
        ...
    
    _SEARCH_PARAMS = ...


class YoutubeTabIE(YoutubeTabBaseInfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    IE_NAME = ...
    _TESTS = ...
    @classmethod
    def suitable(cls, url): # -> bool:
        ...
    
    _URL_RE = ...


class YoutubePlaylistIE(InfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    IE_NAME = ...
    _TESTS = ...
    @classmethod
    def suitable(cls, url): # -> bool:
        ...
    


class YoutubeYtBeIE(InfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeLivestreamEmbedIE(InfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeYtUserIE(InfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeFavouritesIE(YoutubeBaseInfoExtractor):
    IE_NAME = ...
    IE_DESC = ...
    _VALID_URL = ...
    _LOGIN_REQUIRED = ...
    _TESTS = ...


class YoutubeNotificationsIE(YoutubeTabBaseInfoExtractor):
    IE_NAME = ...
    IE_DESC = ...
    _VALID_URL = ...
    _LOGIN_REQUIRED = ...
    _TESTS = ...


class YoutubeSearchIE(YoutubeTabBaseInfoExtractor, SearchInfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _SEARCH_KEY = ...
    _SEARCH_PARAMS = ...
    _TESTS = ...


class YoutubeSearchDateIE(YoutubeTabBaseInfoExtractor, SearchInfoExtractor):
    IE_NAME = ...
    _SEARCH_KEY = ...
    IE_DESC = ...
    _SEARCH_PARAMS = ...
    _TESTS = ...


class YoutubeSearchURLIE(YoutubeTabBaseInfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeMusicSearchURLIE(YoutubeTabBaseInfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...
    _SECTIONS = ...


class YoutubeFeedsInfoExtractor(InfoExtractor):
    """
    Base class for feed extractors
    Subclasses must re-define the _FEED_NAME property.
    """
    _LOGIN_REQUIRED = ...
    _FEED_NAME = ...
    @classproperty
    def IE_NAME(self): # -> LiteralString:
        ...
    


class YoutubeWatchLaterIE(InfoExtractor):
    IE_NAME = ...
    IE_DESC = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeRecommendedIE(YoutubeFeedsInfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _FEED_NAME = ...
    _LOGIN_REQUIRED = ...
    _TESTS = ...


class YoutubeSubscriptionsIE(YoutubeFeedsInfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _FEED_NAME = ...
    _TESTS = ...


class YoutubeHistoryIE(YoutubeFeedsInfoExtractor):
    IE_DESC = ...
    _VALID_URL = ...
    _FEED_NAME = ...
    _TESTS = ...


class YoutubeStoriesIE(InfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeShortsAudioPivotIE(InfoExtractor):
    IE_DESC = ...
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeTruncatedURLIE(InfoExtractor):
    IE_NAME = ...
    IE_DESC = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeClipIE(YoutubeTabBaseInfoExtractor):
    IE_NAME = ...
    _VALID_URL = ...
    _TESTS = ...


class YoutubeTruncatedIDIE(InfoExtractor):
    IE_NAME = ...
    IE_DESC = ...
    _VALID_URL = ...
    _TESTS = ...


