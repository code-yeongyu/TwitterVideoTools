"""
This type stub file was generated by pyright.
"""

import enum
from .fragment import FragmentFD
from ..compat import functools
from ..utils import classproperty

class Features(enum.Enum):
    TO_STDOUT = ...
    MULTIPLE_FORMATS = ...


class ExternalFD(FragmentFD):
    SUPPORTED_PROTOCOLS = ...
    SUPPORTED_FEATURES = ...
    _CAPTURE_STDERR = ...
    def real_download(self, filename, info_dict): # -> bool:
        ...
    
    @classmethod
    def get_basename(cls): # -> str:
        ...
    
    @classproperty
    def EXE_NAME(cls): # -> str:
        ...
    
    @functools.cached_property
    def exe(self):
        ...
    
    @classmethod
    def available(cls, path=...): # -> Literal[False]:
        ...
    
    @classmethod
    def supports(cls, info_dict): # -> bool:
        ...
    
    @classmethod
    def can_download(cls, info_dict, path=...): # -> bool:
        ...
    


class CurlFD(ExternalFD):
    AVAILABLE_OPT = ...
    _CAPTURE_STDERR = ...


class AxelFD(ExternalFD):
    AVAILABLE_OPT = ...


class WgetFD(ExternalFD):
    AVAILABLE_OPT = ...


class Aria2cFD(ExternalFD):
    AVAILABLE_OPT = ...
    SUPPORTED_PROTOCOLS = ...
    @staticmethod
    def supports_manifest(manifest): # -> bool:
        ...
    


class HttpieFD(ExternalFD):
    AVAILABLE_OPT = ...
    EXE_NAME = ...


class FFmpegFD(ExternalFD):
    SUPPORTED_PROTOCOLS = ...
    SUPPORTED_FEATURES = ...
    @classmethod
    def available(cls, path=...): # -> bool:
        ...
    
    def on_process_started(self, proc, stdin): # -> None:
        """ Override this in subclasses  """
        ...
    
    @classmethod
    def can_merge_formats(cls, info_dict, params): # -> bool:
        ...
    


class AVconvFD(FFmpegFD):
    ...


_BY_NAME = ...
def list_external_downloaders(): # -> list[Any]:
    ...

def get_external_downloader(external_downloader): # -> Any | None:
    """ Given the name of the executable, see whether we support the given downloader """
    ...

