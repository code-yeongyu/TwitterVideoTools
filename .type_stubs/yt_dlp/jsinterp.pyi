"""
This type stub file was generated by pyright.
"""

import collections
from .utils import ExtractorError

_OPERATORS = ...
_COMP_OPERATORS = ...
_NAME_RE = ...
_MATCHING_PARENS = ...
_QUOTES = ...
class JS_Undefined:
    ...


class JS_Break(ExtractorError):
    def __init__(self) -> None:
        ...
    


class JS_Continue(ExtractorError):
    def __init__(self) -> None:
        ...
    


class JS_Throw(ExtractorError):
    def __init__(self, e) -> None:
        ...
    


class LocalNameSpace(collections.ChainMap):
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key):
        ...
    


class Debugger:
    ENABLED = ...
    @staticmethod
    def write(*args, level=...): # -> None:
        ...
    
    @classmethod
    def wrap_interpreter(cls, f): # -> (self: Unknown, stmt: Unknown, local_vars: Unknown, allow_recursion: Unknown, *args: Unknown, **kwargs: Unknown) -> tuple[Unknown, Unknown]:
        ...
    


class JSInterpreter:
    __named_object_counter = ...
    _RE_FLAGS = ...
    _EXC_NAME = ...
    def __init__(self, code, objects=...) -> None:
        ...
    
    class Exception(ExtractorError):
        def __init__(self, msg, expr=..., *args, **kwargs) -> None:
            ...
        
    
    
    @Debugger.wrap_interpreter
    def interpret_statement(self, stmt, local_vars, allow_recursion=...):
        ...
    
    def interpret_expression(self, expr, local_vars, allow_recursion):
        ...
    
    def extract_object(self, objname): # -> dict[Unknown, Unknown]:
        ...
    
    def extract_function_code(self, funcname): # -> tuple[list[str | Any], Unknown]:
        """ @returns argnames, code """
        ...
    
    def extract_function(self, funcname): # -> (args: Unknown, kwargs: Unknown = {}, allow_recursion: int = 100) -> (Unknown | None):
        ...
    
    def extract_function_from_code(self, argnames, code, *global_stack): # -> (args: Unknown, kwargs: Unknown = {}, allow_recursion: int = 100) -> (Unknown | None):
        ...
    
    def call_function(self, funcname, *args): # -> None:
        ...
    
    def build_function(self, argnames, code, *global_stack): # -> (args: Unknown, kwargs: Unknown = {}, allow_recursion: int = 100) -> (Unknown | None):
        ...
    


